# vim: filetype=tmux foldmethod=marker foldmarker={{{,}}}
#
# Tmux configuration file.
# Helpful sources:
# - https://github.com/samoshkin/tmux-config/tree/master/tmux
# - https://github.com/sgleizes/dotfiles/tree/master/.config/tmux
#

# Set env vars
setenv -g TMUX_CONF "${HOME}/.config/tmux/tmux.conf"

# Version specific commands
# See: https://github.com/tmux/tmux/blob/master/CHANGES
run 'tmux setenv -g TMUX_VERSION "$(tmux -V | sed -En "s/^tmux ([0-9]+(\.[0-9]+)?).*/\1/p")"'

# Create require dirs
run "mkdir -p ${HOME}/.local/share/tmux"
run "mkdir -p ${HOME}/.cache/tmux"

# {{{ Options

#
# Server options
#

# Faster command sequences. Over a slow network this might need to be increased.
set -s escape-time 0

# Focus events enabled to pass through to application
set -s focus-events on

# Path to the history file for tmux commands.
set -s history-file "${HOME}/.cache/tmux/history"

# Detect the correct TERM value for new sessions.
if-shell '[ $(tput colors) = 256 ]' \
    'set -g default-terminal "tmux-256color"' \
    'set -g default-terminal "tmux"'

#
# Global session/window options
#

# Enable true color.
set -ga terminal-overrides ",*:Tc"

# Use regular interactive shells instead of login shells.
# This is a rather contextual choice.
# See https://superuser.com/questions/968942/why-does-tmux-create-new-windows-as-login-shells-by-default
# http://openbsd-archive.7691.n7.nabble.com/tmux-and-login-shells-td170948.html
set -g default-command "exec ${SHELL}"

# Use configured shell
set -g default-shell "${SHELL}"

# Destroy session when detaching
set -g detach-on-destroy on

# Start window/pane indexes from 1 instead of 0.
set -g base-index 1
set -g pane-base-index 1

# When a window is closed, automatically renumber the other windows in numerical order.
set -g renumber-windows on

# Time in milliseconds the status messages are shown.
set -g display-time 4000

# Time in millisecond the pane numbers are shown and allowed to be selected.
set -g display-panes-time 1000

# Refresh 'status-left' and 'status-right' more often
set -g status-interval 5

# Maximum number of lines held in window/pane history.
set -g history-limit 50000

# Time in milliseconds to allow multiple commands to be entered without the prefix-key.
set -g repeat-time 600

# Monitor windows for activity by default.
set -g monitor-activity on

# Disable wrap search
set -g wrap-search off

# Notify of activity/silence in other windows only.
set -g activity-action other
set -g silence-action other
# Disable all bells.
set -g bell-action none

# Send a bell on activity.
set -g visual-activity off
# Display a status message instead of a bell on silence.
set -g visual-silence on

# Word separators for the copy-mode.
set -g word-separators " ._-~=+:;?!@&*()[]{}|<>/"

# Enable mouse support by default.
set -g mouse on

# emacs key bindings in tmux command prompt (prefix + :) are better than
# vi keys, even for vim users
set -g status-keys emacs

# Useful for multi-monitor setup
set-window-option -g aggressive-resize on

# Renew environment variables when session is created
set -g update-environment \
      "DISPLAY \
      SSH_ASKPASS \
      SSH_AUTH_SOCK \
      SSH_AGENT_PID \
      SSH_CONNECTION \
      SSH_TTY \
      WINDOWID \
      XAUTHORITY"

# Required for osc52
set-option -s set-clipboard on

# Required for base16 colors
if-shell '[ "$(tmux show-environment TMUX_VERSION | cut -d= -f2)" \> "3.3" ]' {
  set -g allow-passthrough on
}

# Required (only) on OS X
if-shell "uname | grep -q Darwin && command -v reattach-to-user-namespace >/dev/null" {
  set -g default-command "reattach-to-user-namespace -l $SHELL"
}

# }}}

# {{{ Key Bindings

#
# Root
#

# Clear both the screen and tmux history buffer.
bind -n 'C-l' send-keys 'C-l' \; run 'sleep 0.1' \; clear-history

bind-key -n MouseDown1Pane select-pane -t = \; send-keys -M
bind-key -n MouseDown1Status select-window -t =
bind-key -n MouseDrag1Pane if-shell -F -t = "#{mouse_any_flag}" "if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\"" "copy-mode -M"
bind-key -n MouseDrag1Border resize-pane -M

# Fix mouse wheel for applications using legacy scroll.
# See https://github.com/tmux/tmux/issues/1320#issuecomment-381952082.
bind -n 'WheelUpPane' {
  if -Ft= "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
    send -Mt=
  } {
    if -Ft= '#{alternate_on}' {
      send -t= -N 3 Up
    } {
      copy-mode -et=
    }
  }
}
bind -n 'WheelDownPane' {
  if -Ft= "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
    send -Mt=
  } {
    if -Ft= '#{alternate_on}' {
      send -t= -N 3 Down
    } {
      send -Mt=
    }
  }
}

# Paste the most recent buffer on middle click.
bind -n 'MouseDown2Pane' {
  select-pane -t=
    if -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
      send -M
    } {
      paste-buffer -p
    }
}

# Copy word with double click
bind -n 'DoubleClick1Pane' {
  select-pane -t=
    if -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
      send -M
    } {
      copy-mode -H; send -X select-word; run -d0.3; send -X copy-pipe-and-cancel
    }
}

# Copy line with triple click
bind -n 'TripleClick1Pane' {
  select-pane -t=
    if -F "#{||:#{pane_in_mode},#{mouse_any_flag}}" {
      send -M
    } {
      copy-mode -H; send -X select-line; run -d0.3; send -X copy-pipe-and-cancel
    }
}

# Zoom/unzoom the selected pane.
bind -n 'M-DoubleClick1Pane' resize-pane -Zt=

#
# Prefix
#

# Remove all default key bindings.
unbind -a -T prefix

# Set the prefix key to C-s and C-g for nested sessions
unbind 'C-b'
set -g prefix 'C-s'
bind 'C-s' send-prefix
bind 'C-g' send-prefix

# Configuration management.
bind -N 'Edit tmux configuration' 'M-e' run-shell \
  'tmux popup -w90% -h90% -E -d "#{pane_current_path}" ${VISUAL:-${EDITOR}} "${TMUX_CONF}" && tmux source "${TMUX_CONF}" && tmux display "Reloaded config"'
bind -N 'Reload the tmux configuration' 'M-r' run-shell \
  'tmux source "${TMUX_CONF}" && tmux display "Reloaded ${TMUX_CONF}"'

# Client operations.
bind -N 'Detach the current client' 'd' detach-client
bind -N 'Detach other clients' 'D' if -F '#{session_many_attached}' \
       'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
       'display "Session has only 1 client attached"'

# Session operations.
bind -N 'Create a new session' 'C' command-prompt { new-session -s "%%" }
bind -N 'Rename session' 'R' command-prompt -I "#S" { rename-session "%%" }
bind -N 'Quit session' 'Q' confirm-before -p "kill-session #S? (y/n)" kill-session

# Session selection.
bind -N 'Select a session interactively' 'S' choose-tree -Zs
bind -N 'Select the next session' -r 'N' switch-client -n
bind -N 'Select the previous session' -r 'P' switch-client -p

# Window operations.
bind -N 'Create a new window' 'c' new-window -c "#{pane_current_path}"
bind -N 'Rename the current window' 'r' command-prompt -I "#W" { rename-window "%%" }
bind -N 'Kill the current window' 'q' kill-window

# Window selection.
bind -N 'Select a window interactively' "w" choose-tree -Zw
bind -N 'Select the last window' -r 'Tab' last-window
bind -N 'Select the next window' -r 'n' next-window
bind -N 'Select the previous window' -r 'p' previous-window
bind -N 'Select window 1' '1' select-window -t :=1
bind -N 'Select window 2' '2' select-window -t :=2
bind -N 'Select window 3' '3' select-window -t :=3
bind -N 'Select window 4' '4' select-window -t :=4
bind -N 'Select window 5' '5' select-window -t :=5
bind -N 'Select window 6' '6' select-window -t :=6
bind -N 'Select window 7' '7' select-window -t :=7
bind -N 'Select window 8' '8' select-window -t :=8
bind -N 'Select window 9' '9' select-window -t :=9
bind -N 'Select window 10' '0' select-window -t :=10

# Window splitting.
bind -N 'Split the current window horizontally' "v" split-window -h -c "#{pane_current_path}"
bind -N 'Split the current window vertically' 's' split-window -v -c "#{pane_current_path}"

# Window layouts.
bind -N 'Select the next window layout' -r 'Space' next-layout
bind -N 'Select the previous window layout' -r 'BSpace' previous-layout
bind -N 'Select the even-horizontal layout' '\' select-layout even-horizontal
bind -N 'Select the even-vertical layout' '-' select-layout even-vertical
bind -N 'Select the main-horizontal layout' '_' select-layout main-horizontal
bind -N 'Select the main-vertical layout' '|' select-layout main-vertical
bind -N 'Select the tiled layout' '+' select-layout tiled
bind -N 'Spread the panes out evenly' '=' select-layout -E

# Pane operations.
bind -N 'Mark the current pane' 'C-m' select-pane -m
bind -N 'Clear the marked pane' 'C-u' select-pane -M
bind -N 'Break the current pane into a new window' 'C-b' break-pane
bind -N 'Join the marked pane with the current pane' 'C-y' join-pane
bind -N 'Swap the current pane with the pane above' -r 'C-[' swap-pane -U
bind -N 'Swap the current pane with the pane below' -r 'C-]' swap-pane -D
bind -N 'Kill the current pane' 'C-q' kill-pane

# Pane selection.
bind -N 'Select the next pane' -r 'C-n' select-pane -t :.+ -Z
bind -N 'Select the previous pane' -r 'C-p' select-pane -t :.- -Z
bind -N 'Select the pane above the active pane' 'C-k' select-pane -U
bind -N 'Select the pane below the active pane' 'C-j' select-pane -D
bind -N 'Select the pane to the left of the active pane' 'C-h' select-pane -L
bind -N 'Select the pane to the right of the active pane' 'C-l' select-pane -R
bind -N 'Select the pane above the active pane' 'Up' select-pane -U
bind -N 'Select the pane below the active pane' 'Down' select-pane -D
bind -N 'Select the pane to the left of the active pane' 'Left' select-pane -L
bind -N 'Select the pane to the right of the active pane' 'Right' select-pane -R

# Pane resizing.
bind -N 'Zoom the current pane' 'C-z' resize-pane -Z
bind -N 'Resize the current pane up' -r 'K' resize-pane -U 3
bind -N 'Resize the current pane down' -r 'J' resize-pane -D 3
bind -N 'Resize the current pane left' -r 'H' resize-pane -L 3
bind -N 'Resize the current pane right' -r 'L' resize-pane -R 3

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
bind -N 'Swap pane with main' ";" if '[ #{pane_index} -eq 1 ]' \
     'swap-pane -s "!"' \
     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Enter backward search mode directly.
bind -N 'Search backward for a regular expression' '/' copy-mode \; send '?'

# Keymap information.
bind -N 'List key bindings' '?' display-popup -w80 -h90% -E "tmux list-keys -N | $PAGER"
bind -N 'Describe a key binding' '.' command-prompt -k -p "(key)" { list-keys -1N "%%" }

# Customize mode.
bind -N 'Customize options and bindings' ',' customize-mode -Z

# Status line commands.
bind -N 'Prompt for a command' ':' command-prompt
bind -N 'Show status line messages' "'" show-messages

# Activity monitoring.
bind -N 'Toggle activity monitoring for the current window' '@' {
  set monitor-activity
  display 'monitor-activity #{?monitor-activity,on,off}'
}

# Silence monitoring.
bind -N 'Toggle silence monitoring for the current window' '!' {
  if -F '#{monitor-silence}' {
    set monitor-silence 0
    display 'monitor-silence off'
  } {
    command-prompt -p "(silence interval)" -I "2" {
      set monitor-silence '%%'
      display 'monitor-silence #{monitor-silence}'
    }
  }
}

# Pane synchronization.
bind -N 'Toggle pane synchronization in the current window' '*' {
  set synchronize-panes
  display 'synchronize-panes #{?synchronize-panes,on,off}'
}

# Enter copy mode.
bind -N 'Enter copy mode' 'Enter' copy-mode

# Toggle locked mode
bind -N 'Toggle locked mode' -T root 'M-;' \
    set prefix None \;\
    set key-table off \;\
    set -g @tmux_locked_mode 1 \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S
bind -N 'Toggle locked mode' -T off 'M-;' \
  set -u prefix \;\
  set -u key-table \;\
  set -g @tmux_locked_mode 0 \;\
  refresh-client -S

# }}}

# {{{ Theme

# Status bar
set -g status on
set -g status-position top
set -g status-left "#[bg=default,fg=white]#{?client_prefix,, #S }#[bg=blue,fg=black]#{?client_prefix, #S ,}"
set -g status-right "#[fg=black,bg=#{?@tmux_locked_mode,red,}] #{?@tmux_locked_mode,LOCKED ,} #[default] #[fg=brightwhite,bold]%a %Y-%m-%d  %H:%M "
set -g status-justify left
set -g status-left-length 200 # increase length (from 10)
set -g status-right-length 200 # increase length (from 10)
set -g status-bg default
set -g status-style bg=default # transparent
set -g window-status-format '#[fg=gray,bg=default] #I:#W '
set -g window-status-current-format '#[fg=black,bg=blue] #I:#W#{?window_zoomed_flag,(+),} '

# Message
set -g message-command-style bg=default,fg=yellow
set -g message-style bg=default,fg=yellow

# Pane
set -g pane-active-border-style 'fg=magenta,bg=default'
set -g pane-border-style 'fg=brightblack,bg=default'

# }}}

# {{{ Plugins

setenv -g TMUX_PLUGIN_MANAGER_PATH "~/.local/share/tmux/plugins"

# tmux-tpm
set -g @plugin 'tmux-plugins/tpm'

# tmux-logging
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @logging_key 'P'
set -g @screen-capture-key 'M-p'
set -g @save-complete-history-key 'M-P'
set -g @clear_history_key 'M-c'
set -g @logging-path '#{pane_current_path}'
set -g @screen-capture-path '#{pane_current_path}'
set -g @save-complete-history-path '#{pane_current_path}'
set -g @logging-filename 'tmux-log.#{session_name}:#{window_index}:#{pane_index}.%Y-%m-%dT%H:%M:%S.log'
set -g @screen-capture-filename 'tmux-screen.#{session_name}:#{window_index}:#{pane_index}.%Y-%m-%dT%H:%M:%S.log'
set -g @save-complete-history-filename 'tmux-history.#{session_name}:#{window_index}:#{pane_index}.%Y-%m-%dT%H:%M:%S.log'

# tmux-yank
set -g @plugin 'tmux-plugins/tmux-yank'
if-shell '[ -n "${SSH_TTY}" ]' {
  # Override copy to use osc52 in SSH
  set -g @override_copy_command "tmux load-buffer -w -"
}

# # smart-splits.nvim
# set -g @plugin 'mrjones2014/smart-splits.nvim'

# Install tpm if not installed
if-shell "test ! -d ~/.local/share/tmux/plugins/tpm" \
    "run 'git clone https://github.com/tmux-plugins/tpm ~/.local/share/tmux/plugins/tpm && ~/.local/share/tmux/plugins/tpm/bin/install_plugins'"

# Initialize the plugin manager (should be last in the config file).
run '~/.local/share/tmux/plugins/tpm/tpm'

# }}}
