------@param buf integer buffer handler
------@return boolean
---local function buf_is_large(_, _)
---  return vim.b["midfile"]
---end
---P("INTO REG TREESITTER")
---
---local function init()
---  require("nvim-treesitter.configs").setup({
---    ensure_installed = {},
---    ignore_install = {},
---    modules = {},
---    sync_install = false,
---    auto_install = false,
---    highlight = {
---      enable = false,
---    },
---    textobjects = {
---      select = {
---        enable = true,
---        lookahead = true,
---        keymaps = {
---          ["ac"] = { query = "@class.outer", desc = "A class" },
---          ["ic"] = { query = "@class.inner", desc = "In class" },
---          ["a?"] = { query = "@conditional.outer", desc = "A conditional" },
---          ["i?"] = { query = "@conditional.inner", desc = "In conditional" },
---          ["am"] = { query = "@function.outer", desc = "A method" },
---          ["im"] = { query = "@function.inner", desc = "In method" },
---          ["aa"] = { query = "@parameter.outer", desc = "A arg" },
---          ["ia"] = { query = "@parameter.inner", desc = "In arg" },
---        },
---      },
---      move = {
---        enable = true,
---        disable = buf_is_large,
---        set_jumps = true, -- whether to set jumps in the jumplist
---        goto_next_start = {
---          ["]m"] = { query = "@function.outer", desc = "Next method start" },
---          ["]c"] = { query = "@class.outer", desc = "Next class start" },
---          ["]a"] = { query = "@parameter.inner", desc = "Next arg start" },
---        },
---        goto_next_end = {
---          ["]M"] = { query = "@function.outer", desc = "Next method end" },
---          ["]C"] = { query = "@class.outer", desc = "Next class end" },
---          ["]A"] = { query = "@parameter.inner", desc = "Next arg end" },
---        },
---        goto_previous_start = {
---          ["[m"] = { query = "@function.outer", desc = "Prev method start" },
---          ["[c"] = { query = "@class.outer", desc = "Prev class start" },
---          ["[a"] = { query = "@parameter.inner", desc = "Prev arg start" },
---        },
---        goto_previous_end = {
---          ["[M"] = { query = "@function.outer", desc = "Prev method end" },
---          ["[C"] = { query = "@class.outer", desc = "Prev class end" },
---          ["[A"] = { query = "@parameter.inner", desc = "Prev arg end" },
---        },
---      },
---      swap = {
---        enable = true,
---        disable = buf_is_large,
---        swap_next = {
---          ["<C-Right>"] = { query = "@parameter.inner", desc = "Swap next arg" },
---        },
---        swap_previous = {
---          ["<C-Left>"] = { query = "@parameter.inner", desc = "Swap previous arg" },
---        },
---      },
---    },
---    incremental_selection = {
---      enable = true,
---      keymaps = {
---        init_selection = "<Enter>",
---        node_incremental = "<Enter>",
---        scope_incremental = "<S-Enter>",
---        node_decremental = "<bs>",
---      },
---    },
---    autotag = { enable = true },
---  })
---end
---
---vim.api.nvim_create_autocmd("BufReadPre", {
---  desc = "Load cmp",
---  once = true,
---  callback = function()
---    init()
---  end,
---})
