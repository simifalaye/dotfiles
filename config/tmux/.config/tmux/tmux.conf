# vim: filetype=conf
#
# Main tmux configuration file.
#
# Setup default env
run "tmux setenv -g TMUX_VERSION $(tmux -V | cut -d' ' -f2)"
TCONFDIR="~/.config/tmux"
TCONF="$TCONFDIR/tmux.conf"
TPLUGDIR="$TCONFDIR/plugins"
TYANKSRC="$TCONFDIR/yank.sh"
TRENEWSRC="$TCONFDIR/renew-env.sh"
TSCRATCHSRC="$TCONFDIR/scratchpad.sh"

# Options
# -------

# Set the correct TERM.
set-option -g default-terminal "tmux-256color"
# Enable true color.
set-option -ga terminal-overrides ",*256col*:Tc"
# Time to wait after escape is input
set -sg escape-time 10
# Focus events enabled
set-option -g focus-events on
# Required for osc52
set -s set-clipboard external

# Prefer vi style key table
setw -g mode-keys vi
# Set shell
set-option -g default-shell "${SHELL}"
# Mouse support
set-option -g mouse on
# Start window/pane indexes from 1 instead of 0.
set -g base-index 1
set -g pane-base-index 1
# When a window is closed, automatically renumber the other windows in numerical order.
set -g renumber-windows on
# Maximum number of lines held in window/pane history.
set -g history-limit 100000
# Activity bell and whistles
set -g monitor-activity on
# Notify of activity/silence in other windows only.
set -g activity-action other
set -g silence-action other
# Disable all bells.
set -g bell-action none
# Send a bell on activity.
set -g visual-activity on
# Display a status message instead of a bell on silence.
set -g visual-silence on
# Useful for multi-monitor setup
set-window-option -g aggressive-resize on
# Word separators for copy-mode.
set -g word-separators " ._-~=+:;?!@&*()[]{}|<>/"
# Used for yank.sh
set -g @copy_use_osc52_fallback on
# Renew environment variables when session is created
set -g update-environment \
  "DISPLAY \
  SSH_ASKPASS \
  SSH_AUTH_SOCK \
  SSH_AGENT_PID \
  SSH_CONNECTION \
  SSH_TTY \
  WINDOWID \
  XAUTHORITY"

# Bindings
# --------

# Chang prefix
unbind C-b
set -g prefix C-a
bind -N 'Send prefix' C-a send-prefix

# Unbind default key bindings, we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind '}'  # swap-pane -D
unbind '{'  # swap-pane -U
unbind [    # paste-buffer
unbind ]
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left

# Edit configuration and reload
bind -N 'Edit config' C-e popup -w90% -h90% -E "${SHELL} -l -c '\${EDITOR:-vi} $TCONF && tmux source $TCONF && tmux display \"Reloaded $TCONF\"'"

# Reload tmux configuration
bind -N 'Reload config' C-r source "$TCONF" && display "Reloaded $TCONF"

# Toggle scratchpad
bind -N 'Toggle scratchpad' ` run-shell "$TSCRATCHSRC"

# Create new window in same dir and prompt rename
bind -N 'Create window' c new-window -c "#{pane_current_path}"
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
bind -N 'Rename window' r command-prompt -I "#{window_name}" "rename-window '%%'"
bind -N 'Rename session' R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
bind -N 'Split right' v split-window -h -c "#{pane_current_path}"
bind -N 'Split down' s split-window -v -c "#{pane_current_path}"

# Select pane and windows
bind -N 'Prev window' -r C-[ previous-window
bind -N 'Next window' -r C-] next-window
bind -N 'Prev pane' -r [ select-pane -t :.-
bind -N 'Next pane' -r ] select-pane -t :.+
bind -N 'Select pane left' -r h select-pane -L
bind -N 'Select pane down' -r j select-pane -D
bind -N 'Select pane up' -r k select-pane -U
bind -N 'Select pane right' -r l select-pane -R
bind -N 'Last window' -r Tab last-window   # cycle thru MRU tabs

# Move pane and window
bind-key -N 'Move window left' -r '<' swap-window -t -1
bind-key -N 'Move window right' -r '>' swap-window -t +1
bind -N 'Swap pane' -r C-o swap-pane -D

# Pane resizing
bind -N 'Resize pane left' -r H resize-pane -L 5
bind -N 'Resize pane down' -r J resize-pane -D 5
bind -N 'Resize pane up' -r K resize-pane -U 5
bind -N 'Resize pane right' -r L resize-pane -R 5

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
bind -N 'Swap first pane' \\ if '[ #{pane_index} -eq 1 ]' \
       'swap-pane -s "!"' \
       'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Link window
bind -N 'Link window' % command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Kill pane/window/session shortcuts
bind -N 'Kill pane' x kill-pane
bind -N 'Kill window' X kill-window
bind -N 'Kill other windows' C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind -N 'Kill session' Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind -N 'Merge session' C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind -N 'Detach session' d detach
bind -N 'Detach other clients' D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Monitor windows
bind -N 'Monitor window' m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind -N 'Monitor window stop' M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Paste
bind -N 'Paste' p paste-buffer
bind -N 'Paste (choose buff)' C-p choose-buffer

# Renew env
bind -N 'Renew env' '$' run "$TRENEWSRC"

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

# Theme
# -----

# Status bar
set -g status           on
set -g status-position  bottom
set -g monitor-activity off
set-window-option -g status-bg colour00
set-window-option -g status-fg colour05
set-window-option -g window-status-current-format "#[fg=black,bg=blue] #I:#W "
set-window-option -g window-status-format "#[fg=brightblack] #I:#W "
set-window-option -g status-right '#{prefix_highlight} #[fg=green]#H '
set-window-option -g window-status-style fg=white,bg=default
set-window-option -g message-style fg=red,bg=default
set-window-option -g pane-active-border-style "#{?pane_in_mode,fg=yellow,#{?synchronize-panes,fg=cyan,fg=red}}"

# Plugins
# -------

# Install tpm if not installed
if "test ! -d $TPLUGDIR/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm $TPLUGDIR/tpm && $TPLUGDIR/tpm/bin/install_plugins'"

# List plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'fcsonline/tmux-thumbs'

# tmux-yank
set -g @yank_selection 'clipboard'
set -g @yank_selection_mouse 'clipboard'
if-shell "command -v $TYANKSRC >/dev/null" {
  set -g @override_copy_command "$TYANKSRC"
}

# tmux-resurrect
set -g @resurrect-dir "$TCONFDIR/resurrect"
set -g @resurrect-save 'M-s'
set -g @resurrect-restore 'M-r'
set -g @resurrect-capture-pane-contents 'on'

# tmux-thumbs
if-shell "command -v $TYANKSRC >/dev/null" {
  set -g @thumbs-command "echo -n {} | $TYANKSRC"
    set -g @thumbs-upcase-command "echo -n {} | $TYANKSRC"
    set -g @thumbs-multi-command "echo -n {} | $TYANKSRC"
}
run-shell $TPLUGDIR/tmux-thumbs/tmux-thumbs.tmux

# Initialize the plugin manager (should be last in the config file).
run -b $TPLUGDIR/tpm/tpm
